import RPi.GPIO as GPIO
import time

# Configuración de los pines GPIO
LED_CERRADO = 17
LED_ABIERTO = 27
LED_BLOQUEADO = 22
PULSADOR_CERRADO = 23
PULSADOR_ABIERTO = 24
PULSADOR_BLOQUEADO = 25

# Configurar los pines GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(LED_CERRADO, GPIO.OUT)
GPIO.setup(LED_ABIERTO, GPIO.OUT)
GPIO.setup(LED_BLOQUEADO, GPIO.OUT)
GPIO.setup(PULSADOR_CERRADO, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(PULSADOR_ABIERTO, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(PULSADOR_BLOQUEADO, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Estados de la puerta
CERRADO = "CERRADO"
ABIERTO = "ABIERTO"
BLOQUEADO = "BLOQUEADO"
estado = CERRADO

# Contraseña para desbloquear la puerta
CONTRASEÑA_CORRECTA = "1234"

# Tiempo de debounce en milisegundos
DEBOUNCE_DELAY = 200  # 200 ms

# Últimos tiempos de lectura de los pulsadores
ultimo_tiempo_cerrado = 0
ultimo_tiempo_abierto = 0
ultimo_tiempo_bloqueado = 0

# Función para actualizar el estado de los LEDs
def actualizar_leds():
    GPIO.output(LED_CERRADO, estado == CERRADO)
    GPIO.output(LED_ABIERTO, estado == ABIERTO)
    GPIO.output(LED_BLOQUEADO, estado == BLOQUEADO)

# Función para manejar la entrada de la contraseña
def ingresar_contraseña():
    print("Ingrese la contraseña para desbloquear:")
    contraseña = input().strip()
    if contraseña == CONTRASEÑA_CORRECTA:
        print("Contraseña correcta. Puerta desbloqueada.")
        return True
    else:
        print("Contraseña incorrecta.")
        return False

try:
    actualizar_leds()  # Asegura que los LEDs reflejen el estado inicial
    print(f"Estado inicial: {estado}")

    while True:
        tiempo_actual = time.time() * 1000  # Obtener el tiempo actual en milisegundos

        if estado != BLOQUEADO:
            if GPIO.input(PULSADOR_CERRADO) == GPIO.LOW and (tiempo_actual - ultimo_tiempo_cerrado) > DEBOUNCE_DELAY:
                estado = CERRADO
                print("Puerta cerrada")
                actualizar_leds()
                ultimo_tiempo_cerrado = tiempo_actual

            if GPIO.input(PULSADOR_ABIERTO) == GPIO.LOW and (tiempo_actual - ultimo_tiempo_abierto) > DEBOUNCE_DELAY:
                estado = ABIERTO
                print("Puerta abierta")
                actualizar_leds()
                ultimo_tiempo_abierto = tiempo_actual

            if GPIO.input(PULSADOR_BLOQUEADO) == GPIO.LOW and (tiempo_actual - ultimo_tiempo_bloqueado) > DEBOUNCE_DELAY:
                if estado == CERRADO:
                    estado = BLOQUEADO
                    print("Puerta bloqueada")
                    actualizar_leds()
                    ultimo_tiempo_bloqueado = tiempo_actual
                else:
                    print("No se puede bloquear la puerta si no está cerrada")
        else:
            if ingresar_contraseña():
                estado = CERRADO
                print("Puerta cerrada")
                actualizar_leds()

        time.sleep(0.01)  # Pequeño delay para evitar sobrecargar la CPU

except KeyboardInterrupt:
    print("Saliendo...")
finally:
    GPIO.cleanup()
    print("Limpieza de GPIO y salida.")